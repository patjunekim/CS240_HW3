/**
 * Implements the ADT deque by using a singly linked chain of nodes.
 * 
 * @author Pj Kim
 */

public class SingleLinkedDeque<T> implements DequeInterface<T> {
	private int num_elements;
	private Node first;
	private Node last;

private class Node {
	T newEntry;
	Node next; 
	private Node(T item, Node next) {

		if (item == null) throw new NullPointerException();
		this.item = item; // this refers to created instance
		this.next = next;
	}
}

   /** Adds a new entry to the front/back of this deque.
       @param newEntry  An object to be added. */

   public void addToFront(T newEntry); {
	first = new Node(newEntry, first)
	if (num_elements == 0) last = first;
	num_elements++;
}

   public void addToBack(T newEntry); {
   	if (num_elements == 0) {
		addToFront(newEntry);
		return;
	}
}
   /** Removes and returns the front/back entry of this deque.
       @return  The object at the front/back of the deque.
       @throws  EmptyQueueException if the deque is empty before the operation. */

   public T removeFront(); {
   	if (isEmpty()) {
		throw new NoSuchElementQueueException();	 // Book uses this exception
	}
}

   public T removeBack(); {
   	if (isEmpty()) {
		   throw new NoSuchElementException();
	}
}
   /** Retrieves the front/back entry of this deque.
       @return  The object at the front/back of the deque.
       @throws  EmptyQueueException if the deque is empty before the operation. */

   public T getFront(); {
   	if (isEmpty()) {
   		throw new NoSuchElementException();
	else {
		return first; // ??
		}
	}
}
   public T getBack(); {
   	if (isEmpty()) {
		throw new NoSuchElementException();
	else {
		return last; // ??
		}
	}
}
   /*  Detects whether this deque is empty.
       @return  True if the queue is empty, or false otherwise. */

   public boolean isEmpty(); {
	   return num_elements(); // ??
}

   /*  Removes all entries from this deque. */
   public void clear(); {
	num_elements = 0;
	}
} // end DequeInterface








/**
 * Implements the ADT deque by using a doubly linked chain of nodes.
 * 
 * @author Pj Kim
 */
public class DoubleLinkedDeque<T> implements DequeInterface<T> {
    private DLNode firstNode; // references node at front of deque
    private DLNode lastNode;  // references node at back of deque
	
    public DoubleLinkedDeque() {
	firstNode = null;
	lastNode = null;
    } // end default constructor 
	
    public void addToFront(T newEntry) {
	DLNode newNode = new DLNode(null, newEntry, firstNode);
	  
	if (isEmpty())
	    lastNode = newNode;
	else
	    firstNode.setPreviousNode(newNode);
	    
	firstNode = newNode;
    } // end addToFront

    public void addToBack(T newEntry){ 
	DLNode newNode = new DLNode(lastNode, newEntry, null);
		
	if (isEmpty())
	    firstNode = newNode;
	else
	    lastNode.setNextNode(newNode);
		
	lastNode = newNode;
    } // end addToBack

    public T getFront(){ // same as in LinkedQueue 24.04
	T front = null;
		
	if (!isEmpty())
	    front = firstNode.getData();
		
	return front;
    } // end getFront

    public T getBack() {
	T back = null;
		
	if (!isEmpty())
	    back = lastNode.getData();
		
	return back;
    } // end getBack

    public T removeFront() {
	T front = null;
	  
	if (!isEmpty()) {
	    front = firstNode.getData();
	    firstNode = firstNode.getNextNode();
	    
	    if (firstNode == null)
		lastNode = null;
	    else
		firstNode.setPreviousNode(null);
	} // end if
	  
	return front;
    } // end removeFront
		
    public T removeBack() {
	T back = null;
		
	if (!isEmpty()) {
	    back = lastNode.getData();
	    lastNode = lastNode.getPreviousNode();
			
	    if (lastNode == null)
		firstNode = null;
	    else
		lastNode.setNextNode(null);
	} // end if
		
	return back;
    } // end removeBack

    public boolean isEmpty() {
	return (firstNode == null) &&(lastNode == null);
    } // end isEmpty
	
    public void clear() {
	firstNode = null;	
	lastNode = null;
    } // end clear

    private class DLNode {
	private T      data;  	 	 // entry for deque
	private DLNode next; 	 // link to next node
	private DLNode previous;    // link to previous node

    } // end DLNode
} // end DoubleLinkedDeque

